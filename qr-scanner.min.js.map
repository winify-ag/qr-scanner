{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\n        // given. That doesn't matter for us though as we don't require labels.\n        return navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\n            .catch(() => false);\n    }\n\n    constructor(video, onDecode, canvasSize = QrScanner.DEFAULT_CANVAS_SIZE) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._active = false;\n        this._paused = false;\n\n        this.$canvas.width = canvasSize;\n        this.$canvas.height = canvasSize;\n        this._sourceRect = {\n            x: 0,\n            y: 0,\n            width: canvasSize,\n            height: canvasSize\n        };\n\n        this._onCanPlay = this._onCanPlay.bind(this);\n        this._onPlay = this._onPlay.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        this._scanFrame = this._scanFrame.bind(this);\n\n        this.$video.addEventListener('canplay', this._onCanPlay);\n        this.$video.addEventListener('play', this._onPlay);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrWorker = new Worker(QrScanner.WORKER_PATH);\n    }\n\n    destroy() {\n        this.$video.removeEventListener('canplay', this._onCanPlay);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        this._qrWorker.postMessage({\n            type: 'close'\n        });\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        this._paused = false;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        clearTimeout(this._offTimeout);\n        this._offTimeout = null;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        let facingMode = 'environment';\n        return this._getCameraStream('environment', true)\n            .catch(() => {\n                // we (probably) don't have an environment camera\n                facingMode = 'user';\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\n            })\n            .then(stream => {\n                this.$video.srcObject = stream;\n                this._setVideoMirror(facingMode);\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    pause() {\n        this._paused = true;\n        if (!this._active) {\n            return;\n        }\n        this.$video.pause();\n        if (this._offTimeout) {\n            return;\n        }\n        this._offTimeout = setTimeout(() => {\n            const track = this.$video.srcObject && this.$video.srcObject.getTracks()[0];\n            if (!track) return;\n            track.stop();\n            this.$video.srcObject = null;\n            this._offTimeout = null;\n        }, 300);\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, options) {\n        const defaultOptions = {\n            sourceRect: null,\n            worker: null,\n            canvas: null,\n            fixedCanvasSize: false,\n            alsoTryWithoutSourceRect: false,\n            scanTimeout: 5000\n        };\n        let { sourceRect, worker, canvas, fixedCanvasSize, alsoTryWithoutSourceRect, scanTimeout } = Object.assign(defaultOptions, options);\n        let createdNewWorker = false;\n        let promise = new Promise((resolve, reject) => {\n            if (!worker) {\n                worker = new Worker(QrScanner.WORKER_PATH);\n                createdNewWorker = true;\n                worker.postMessage({ type: 'inversionMode', data: 'both' }); // scan inverted color qr codes too\n            }\n            let timeout, onMessage, onError;\n            onMessage = event => {\n                if (event.data.type !== 'qrResult') {\n                    return;\n                }\n                worker.removeEventListener('message', onMessage);\n                worker.removeEventListener('error', onError);\n                clearTimeout(timeout);\n                if (event.data.data !== null) {\n                    resolve(event.data.data);\n                } else {\n                    reject('QR code not found.');\n                }\n            };\n            onError = (e) => {\n                worker.removeEventListener('message', onMessage);\n                worker.removeEventListener('error', onError);\n                clearTimeout(timeout);\n                const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                reject('Scanner error: ' + errorMessage);\n            };\n            worker.addEventListener('message', onMessage);\n            worker.addEventListener('error', onError);\n            timeout = setTimeout(() => onError('timeout'), scanTimeout);\n            QrScanner._loadImage(imageOrFileOrUrl).then(image => {\n                const imageData = QrScanner._getImageData(image, sourceRect, canvas, fixedCanvasSize);\n                worker.postMessage({\n                    type: 'decode',\n                    data: imageData\n                }, [imageData.data.buffer]);\n            }).catch(onError);\n        });\n\n        if (sourceRect && alsoTryWithoutSourceRect) {\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, {\n                sourceRect: null,\n                worker,\n                canvas,\n                fixedCanvasSize\n            }));\n        }\n\n        promise = promise.finally(() => {\n            if (!createdNewWorker) return;\n            worker.postMessage({\n                type: 'close'\n            });\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        this._qrWorker.postMessage({\n            type: 'grayscaleWeights',\n            data: { red, green, blue, useIntegerApproximation }\n        });\n    }\n\n    setInversionMode(inversionMode) {\n        this._qrWorker.postMessage({\n            type: 'inversionMode',\n            data: inversionMode\n        });\n    }\n\n    _onCanPlay() {\n        this._updateSourceRect();\n        this.$video.play();\n    }\n\n    _onPlay() {\n        this._updateSourceRect();\n        this._scanFrame();\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _updateSourceRect() {\n        const smallestDimension = Math.min(this.$video.videoWidth, this.$video.videoHeight);\n        const sourceRectSize = Math.round(2 / 3 * smallestDimension);\n        this._sourceRect.width = this._sourceRect.height = sourceRectSize;\n        this._sourceRect.x = (this.$video.videoWidth - sourceRectSize) / 2;\n        this._sourceRect.y = (this.$video.videoHeight - sourceRectSize) / 2;\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            QrScanner.scanImage(this.$video, {\n                sourceRect: this._sourceRect,\n                worker: this._qrWorker,\n                canvas: this.$canvas,\n                fixedCanvasSize: true\n            })\n                .then(this._onDecode, error => {\n                    if (this._active && error !== 'QR code not found.') {\n                        console.error(error);\n                    }\n                })\n                .then(() => setTimeout(this._scanFrame, 100));\n        });\n    }\n\n    _getCameraStream(facingMode, exact = false) {\n        const constraintsToTry = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n\n        if (facingMode) {\n            if (exact) {\n                facingMode = { exact: facingMode };\n            }\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\n        }\n        return this._getMatchingCameraStream(constraintsToTry);\n    }\n\n    _getMatchingCameraStream(constraintsToTry) {\n        if (constraintsToTry.length === 0) {\n            return Promise.reject('Camera not found.');\n        }\n        return navigator.mediaDevices.getUserMedia({\n            video: constraintsToTry.shift()\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    static _getImageData(image, sourceRect=null, canvas=null, fixedCanvasSize=false) {\n        canvas = canvas || document.createElement('canvas');\n        const sourceRectX = sourceRect && sourceRect.x? sourceRect.x : 0;\n        const sourceRectY = sourceRect && sourceRect.y? sourceRect.y : 0;\n        const sourceRectWidth = sourceRect && sourceRect.width? sourceRect.width : image.width || image.videoWidth;\n        const sourceRectHeight = sourceRect && sourceRect.height? sourceRect.height : image.height || image.videoHeight;\n        if (!fixedCanvasSize && (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight)) {\n            canvas.width = sourceRectWidth;\n            canvas.height = sourceRectHeight;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(image, sourceRectX, sourceRectY, sourceRectWidth, sourceRectHeight, 0, 0, canvas.width, canvas.height);\n        return context.getImageData(0, 0, canvas.width, canvas.height);\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrUrl) {\n        if (imageOrFileOrUrl instanceof HTMLCanvasElement || imageOrFileOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrUrl);\n        } else if (imageOrFileOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrUrl).then(() => imageOrFileOrUrl);\n        } else if (imageOrFileOrUrl instanceof File || imageOrFileOrUrl instanceof URL\n            ||  typeof(imageOrFileOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrUrl instanceof File) {\n                image.src = URL.createObjectURL(imageOrFileOrUrl);\n            } else {\n                image.src = imageOrFileOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrUrl instanceof File) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n"],"names":["constructor","QrScanner","video","onDecode","canvasSize","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","_paused","_active","width","height","_sourceRect","x","y","_onCanPlay","bind","_onPlay","_onVisibilityChange","_scanFrame","addEventListener","_qrWorker","Worker","WORKER_PATH","hasCamera","navigator","mediaDevices","enumerateDevices","then","devices","some","device","kind","catch","destroy","removeEventListener","stop","postMessage","type","start","Promise","resolve","window","location","protocol","console","warn","hidden","clearTimeout","_offTimeout","srcObject","play","facingMode","_getCameraStream","stream","_setVideoMirror","e","pause","setTimeout","track","scanImage","imageOrFileOrUrl","options","Object","assign","sourceRect","worker","canvas","fixedCanvasSize","alsoTryWithoutSourceRect","scanTimeout","createdNewWorker","promise","reject","data","onMessage","event","onError","timeout","_loadImage","image","imageData","buffer","finally","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","_updateSourceRect","videoHeight","sourceRectSize","videoWidth","paused","ended","requestAnimationFrame","error","exact","min","constraintsToTry","forEach","constraint","_getMatchingCameraStream","length","getUserMedia","shift","style","transform","_getImageData","sourceRectWidth","sourceRectHeight","alpha","context","imageSmoothingEnabled","drawImage","sourceRectX","sourceRectY","getImageData","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad"],"mappings":"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"}